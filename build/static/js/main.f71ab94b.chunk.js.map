{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","_ref","title","calories","image","ingredients","React","createElement","className","style","recipe","src","alt","Math","round","map","ingredinet","text","App","recipes","setRecipes","useState","search","setSearch","query","setQuery","useEffect","getRecipes","async","response","fetch","data","json","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,0KCqB3CC,MAnBDC,IAAuC,IAAtC,MAACC,EAAK,SAACC,EAAQ,MAACC,EAAK,YAACC,GAAYJ,EAC7C,OACIK,IAAAC,cAAA,OAAKC,UAAWC,IAAMC,QAClBJ,IAAAC,cAAA,UAAKL,GACLI,IAAAC,cAAA,OAAKC,UAAWC,IAAML,MAAOO,IAAKP,EAAOQ,IAAI,KAC7CN,IAAAC,cAAA,UAAI,YAAUM,KAAKC,MAAMX,IACzBG,IAAAC,cAAA,UACKF,EAAYU,IAAIC,GACbV,IAAAC,cAAA,UACKS,EAAWC,U,MC8CrBC,MAnDHA,KACV,MAGOC,EAAQC,GAAcC,mBAAS,KACjCC,EAAOC,GAAaF,mBAAS,KAC9BG,EAAOC,GAAWJ,mBAAS,WAE/BK,oBAAU,KACRC,KACC,CAACH,IAEN,MAAMG,EAAaC,UACjB,MAAMC,QAAiBC,MAAM,mCAAmCN,8DAC1DO,QAAcF,EAASG,OAC7BZ,EAAWW,EAAKE,MAChBC,QAAQC,IAAIJ,EAAKE,OAcjB,OAEE3B,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,QAAO6B,SATMC,IAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAMqBf,UAAU,eACpCF,IAAAC,cAAA,SAAOC,UAAU,aAAa+B,KAAK,OAAOC,MAAOlB,EAAQmB,SAf5CJ,IACnBd,EAAUc,EAAEK,OAAOF,UAeblC,IAAAC,cAAA,UAAQC,UAAU,gBAAgB+B,KAAK,UAAU,WAEnDjC,IAAAC,cAAA,OAAKC,UAAU,WACdW,EAAQJ,IAAIL,GACZJ,IAAAC,cAACP,EAAM,CAAC2C,IAAKjC,EAAOA,OAAOkC,MAC3B1C,MAAOQ,EAAOA,OAAOkC,MACrBzC,SAAUO,EAAOA,OAAOP,SACxBC,MAAOM,EAAOA,OAAON,MACrBC,YAAaK,EAAOA,OAAOL,kBCtCdwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP7C,IAAAC,cAACD,IAAM8C,WAAU,KACf9C,IAAAC,cAACW,EAAG,OAENmC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAKC,IACJA,EAAaC,eAEdC,MAAMC,IACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.f71ab94b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};","import React from 'react';\nimport style from './recipe.module.css';\n\nconst Recipe =({title,calories,image,ingredients})=>{\n    return(\n        <div className={style.recipe}>\n            <h1>{title}</h1>\n            <img className={style.image} src={image} alt=\"\" />\n            <h2>calories:{Math.round(calories)}</h2>\n            <ol>\n                {ingredients.map(ingredinet =>(\n                    <li>\n                        {ingredinet.text}\n                    </li>\n                ))}\n            </ol>\n           \n            \n        </div>\n    );\n}\n\nexport default Recipe;","import React,{useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\n\n\n\nconst App = () => {\n  const App_ID = \"94f00cee\";\n  const App_KEY = \"af5c4585ffd898d6b1da1430c7904289\";\n\n  const[ recipes,setRecipes ]= useState([]);\n const[search,setSearch] = useState('');\nconst[query, setQuery]= useState('chicken');\n\n  useEffect(() => {\n    getRecipes();\n   },[query]);\n\nconst getRecipes = async()=>{\n  const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${App_ID}&app_key=${App_KEY}`);\n  const data =  await response.json();\n  setRecipes(data.hits);\n  console.log(data.hits);\n};\n\nconst updateSearch = e => {\n  setSearch(e.target.value);\n  \n};\n\n const getSearch = e => {\n   e.preventDefault();\n   setQuery(search);\n   setSearch('');\n }\n\n  return (\n\n    <div className=\"App\">\n      <form  onSubmit={getSearch} className=\"search-form\" >\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n        <button className=\"search-button\" type=\"submit\" >search</button>\n      </form>\n      <div className=\"recipes\">\n      {recipes.map(recipe=>(\n       <Recipe key={recipe.recipe.label} \n       title={recipe.recipe.label} \n       calories={recipe.recipe.calories}\n       image={recipe.recipe.image}\n       ingredients={recipe.recipe.ingredients}/>\n     ))}\n      </div>\n     \n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}